################################################################################
# TOOLS
#
# [R]: Single value variable can be redefined in other makefiles
# [+]: Values can be added to the variable in other makefiles
# [X]: Variable must not be redefined nor values be added to it
################################################################################
# Path to analysis folder                                                    [R]
# Path to documentation folder                                               [R]
################################################################################
# CPPCHECK
################################################################################
CPPCHECK_PATH = $(ANALYSIS_PATH)/cppcheck
CPPCHECK := cppcheck
# Enable all checks
CPPCHECK += --enable=all
CPPCHECK += --force
# Allow reports even if the analysis is inconclusive
CPPCHECK += --inconclusive
CPPCHECK += --language=c
CPPCHECK += --platform=unix64
# Only print if there is an error
CPPCHECK += --quiet
CPPCHECK += --std=c11
#CPPCHECK += -I./$(HEADER_PATH)
CPPCHECK += . 2> $(CPPCHECK_PATH)/cppcheck
################################################################################
# DOXYGEN
################################################################################
DOXYGEN_PATH = $(DOC_PATH)/doxygen
DOXYGEN := doxygen
################################################################################
# GCOV
################################################################################
# Set gcov version to the same as the gcc one.
GCOV = gcov$(lastword $(subst -, -,$(CC)))
################################################################################
# LCOV
################################################################################
LCOV = lcov
# Capture coverage data
LCOV += --capture
# Use current directory as base for relative paths
LCOV += --directory .
# Path to the appropriate gcov executable
LCOV += --gcov-tool $(GCOV)
# Don't include external source files
LCOV += --no-external
# Don't print progress messages
LCOV += --quiet
# Capture branch coverage
LCOV += --rc lcov_branch_coverage=1
# Output path for data generated by lcov
LCOV_PATH = $(ANALYSIS_PATH)/lcov
# Make a first pass to establish a baseline with 0 coverage.
LCOV_INITIAL  = $(LCOV)
LCOV_INITIAL += --initial
LCOV_INITIAL += -o $(LCOV_PATH)/test_main_initial.info
# Make the actual capture run
LCOV_RUN  = $(LCOV)
LCOV_RUN += -o $(LCOV_PATH)/test_main_run.info
# Combine baseline and run
LCOV_FINAL  = lcov
LCOV_FINAL += -a $(LCOV_PATH)/test_main_initial.info
LCOV_FINAL += -a $(LCOV_PATH)/test_main_run.info
LCOV_FINAL += -o $(LCOV_PATH)/test_main_final.info
# Generate html report
GENHTML  = genhtml
GENHTML += --legend
GENHTML += --quiet
GENHTML += --show-details
GENHTML += -o $(LCOV_PATH) $(LCOV_PATH)/test_main_final.info
# Command ran by the code coverage target
COV_CMD = $(LCOV_INITIAL) \
	&& $(RUN_CMD) \
	&& $(LCOV_RUN) \
	&& $(LCOV_FINAL) \
	&& $(GENHTML)
################################################################################
# SCANBUILD
################################################################################
SCANBUILD_PATH = $(ANALYSIS_PATH)/scanbuild
SCANBUILD := scan-build
SCANBUILD += -analyze-headers
SCANBUILD += -o $(SCANBUILD_PATH)
SCANBUILD += make --silent all
################################################################################
# VALGRIND
################################################################################
VALGRIND_PATH = $(ANALYSIS_PATH)/valgrind
MEMCHECK := --leak-check=full
MEMCHECK += --show-leak-kinds=all
MEMCHECK += --track-origins=yes
VALGRIND = valgrind $(MEMCHECK) $(TEST_EXE) 2> $(VALGRIND_PATH)/valgrind
################################################################################
# PKGCONFIG
################################################################################
# Name of the pkg-config file(*.pc)
PKG_PC_NAME = $(PROJECT).pc
# Installation path for the pkg-config file(*.pc)
PKG_PC_INSTALL_PATH = $(libdir)/pkgconfig
# Target for the pkg-config file header template
PKG_HEADER_TARGET = $(MAKEFILE_PATH)/header.pc.in
# Create a pkg-config file(*.pc) by taking a template file (*pc.in) and replace
# all the `@variable@` with an actual value.
# `|` is used instead of `/` otherwise sed will fail when variables contain a
# `/` which is almost always the case with paths(=> 's/@prefix@//usr/local/').
PKG_PC_IN = sed \
-e 's|@prefix@|$(prefix)|' \
-e 's|@exec_prefix@|$(exec_prefix)|' \
-e 's|@includedir@|$(includedir)|' \
-e 's|@libdir@|$(libdir)|' \
-e 's|@PROJECT@|$(PROJECT)|' \
-e 's|@DESCRIPTION@|$(DESCRIPTION)|' \
-e 's|@VERSION@|$(VERSION)|' \
$@ > $(PKG_PC_NAME)
